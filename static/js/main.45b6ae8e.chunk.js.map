{"version":3,"sources":["Api/gecko.ts","Context/GlobalContextProvider.tsx","Components/Navbar/Navbar.tsx","Components/MetaMaskButton.tsx","Context/TotalAssetValueContext.tsx","Utils.ts","Api/Imx.ts","Api/link.ts","Pages/OrdersPage.tsx","Components/TokenSummaryDisplay.tsx","Components/TokenSummaryList.tsx","Pages/TokenSummaryPage.tsx","App.tsx","index.tsx"],"names":["fetchCoinPrice","coinID","a","fetch","then","x","json","usd","fetchEthPrice","fetchGodsPrice","EthPriceContext","React","createContext","GodsPriceContext","SetAddressContext","AddressContext","useEthPrice","useContext","useGodsPrice","useAddress","GlobalContextProvider","children","useState","ethPrice","setEthPrice","godsPrice","setGodsPrice","addr","setAddr","useEffect","gecko","Provider","value","Navbar","props","currentPage","setCurrentPage","console","log","className","items","map","item","i","onClick","label","page","ButtonMetaMask","useMetaMask","status","connect","account","setAddress","TotalAssetValueContext","TotalAssetValueAddContext","n","TotalAssetValueProvider","totalValue","totalValueSet","v","old","round","d","Math","pow","Number","EPSILON","sleep","ms","Promise","resolve","setTimeout","undercut","currency","amount","fetchBalances","res","fetchAssets","fetchAssetsByName","name","fetchOrdersByNameEth","data","encodeURIComponent","fetchOrdersByNameGods","fetchOrdersByName","getPriceByNameGods","buy","result","quantity","decimals","getPriceByNameEth","waitOrder","address","tokenName","orderID","count","some","no","orders","sell_orders","so","order_id","sell","token","price","currencyAddress","link","Link","toString","tokenId","token_id","tokenAddress","token_address","num","sellEth","sellGods","TokenListDisplay","p","ImageDisplay","src","url","OrderDisplay","sellOrder","buy_quantity","buy_decimals","setAmount","contract_address","setPrice","selling","setSelling","imx","order","currentAmount","undercutPrice","user","newPrice","OrdersPage","setOrders","responds","assetsWithSellOrders","filter","length","t","metadata","image","TokenSummaryDisplay","tokenGrp","tokensx","tokens","setTokens","amountEth","setAmountEth","amountGods","setAmountGods","addTotalAssetValue","find","undefined","currentAmountEth","newAmountEth","sellOrderID","waitResult","currentAmountGods","newAmountGods","getPrice","ethRes","ethQuantity","godsRes","godsQuantity","TokenSummaryList","grouped","reduce","acc","itm","push","Object","entries","grp","onChange","TokenSummaryPage","ethBalance","setEthBalance","godsBalance","setGodsBalance","totalAssetValue","balancesResponds","newGods","symbol","balance","newEth","balanceTotal","total","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45b6ae8e.chunk.js","sourcesContent":["export async function fetchCoinPrice (coinID:string)\r\n{\r\n  return fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=\"+coinID+\"&vs_currencies=usd\")\r\n    .then(x => x.json())\r\n    .then(x => x[coinID].usd)\r\n}\r\n\r\nexport async function fetchEthPrice ()\r\n{\r\n    return fetchCoinPrice(\"ethereum\")\r\n}\r\n\r\nexport async function fetchGodsPrice ()\r\n{\r\n    return fetchCoinPrice(\"gods-unchained\")\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport * as gecko from '../Api/gecko'\r\n\r\nconst EthPriceContext = React.createContext(0)\r\nconst GodsPriceContext = React.createContext(0)\r\nconst SetAddressContext = React.createContext((x:string) => { })\r\nconst AddressContext = React.createContext(\"\")\r\n\r\nexport function useEthPrice() { return useContext(EthPriceContext) }\r\nexport function useGodsPrice() { return useContext(GodsPriceContext) }\r\nexport function useSetAddress() { return useContext(SetAddressContext) }\r\nexport function useAddress() { return useContext(AddressContext) }\r\n\r\nexport function GlobalContextProvider({ children }:{ children:JSX.Element })\r\n{\r\n    const [ethPrice, setEthPrice] = useState(0)\r\n    const [godsPrice, setGodsPrice] = useState(0)\r\n    const [ addr, setAddr ] = useState(\"\")\r\n\r\n    useEffect(() => { (async () => {\r\n            setEthPrice(await gecko.fetchEthPrice())\r\n            setGodsPrice(await gecko.fetchGodsPrice())\r\n    })()})\r\n\r\n    return (\r\n        <AddressContext.Provider value={addr}>\r\n        <SetAddressContext.Provider value={setAddr}>\r\n        <EthPriceContext.Provider value={ethPrice}>\r\n        <GodsPriceContext.Provider value={godsPrice}>\r\n            {children}\r\n        </GodsPriceContext.Provider>\r\n        </EthPriceContext.Provider>\r\n        </SetAddressContext.Provider>\r\n        </AddressContext.Provider>\r\n    )\r\n}","import { useState } from 'react';\r\nimport './Navbar.css'\r\n\r\ntype NavbarItem =\r\n{\r\n    label:string\r\n    page:JSX.Element\r\n}\r\n\r\ntype Props =\r\n{\r\n    items:NavbarItem[]\r\n}\r\n\r\nexport default function Navbar(props:Props)\r\n{\r\n    var [currentPage, setCurrentPage] = useState(-1)\r\n    console.log(\"current page \" + currentPage)\r\n    return (\r\n        <div>\r\n            <nav className='nav-bar-items'>\r\n                <ul className='nav-menu'>\r\n                    {props.items.map((item,i) => (<li  key={i}><button onClick={x => setCurrentPage(i)} className='nav-bar-item'>{item.label}</button></li>))}\r\n                </ul>\r\n            </nav>\r\n            <div>\r\n                {currentPage === -1 ? (<></>) : props.items[currentPage].page}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { useMetaMask } from \"metamask-react\";\r\nimport { useSetAddress } from '../Context/GlobalContextProvider';\r\n\r\nexport default function ButtonMetaMask()\r\n{\r\n  const { status, connect, account } = useMetaMask();\r\n  const setAddress = useSetAddress()\r\n\r\n  useEffect(() => \r\n  {\r\n    if(status == \"connected\")\r\n      setAddress(account || \"\")\r\n  }, [status])\r\n\r\n  let label = null\r\n  if (status === \"initializing\")\r\n    label = <div>Synchronisation with MetaMask ongoing...</div>\r\n  if (status === \"unavailable\")\r\n    label = <div>MetaMask not available :(</div>\r\n  if (status === \"connecting\")\r\n    label = <div>Connecting...</div>\r\n  if (status === \"connected\")\r\n    return null\r\n  if (status === \"notConnected\")\r\n    label = <button onClick={connect}>Connect to MetaMask</button>\r\n\r\n  return (<a className='meta-mask-button'>{label}</a>)\r\n}","import React, { useContext, useState } from 'react'\r\n\r\nconst TotalAssetValueContext = React.createContext(0)\r\nconst TotalAssetValueAddContext = React.createContext((n:number) => {})\r\n\r\nexport function useTotalAssetValue() { return useContext(TotalAssetValueContext) }\r\nexport function useTotalAssetValueAdd() { return useContext(TotalAssetValueAddContext) }\r\n\r\nexport function TotalAssetValueProvider({ children }:{ children:JSX.Element })\r\n{\r\n    const [totalValue, totalValueSet] = useState(0)\r\n    function addValue(v:number) {\r\n        totalValueSet(old => old+v)\r\n    }\r\n\r\n    return (\r\n        <TotalAssetValueContext.Provider value={totalValue}>\r\n            <TotalAssetValueAddContext.Provider value={addValue}>\r\n                {children}\r\n            </TotalAssetValueAddContext.Provider>\r\n        </TotalAssetValueContext.Provider>\r\n    )\r\n}","import {useEffect} from 'react'\r\n\r\nexport function round(n:number, d:number)\r\n{\r\n    if(n === 0)\r\n        return 0\r\n    const x = Math.pow(10,d)\r\n    return Math.round((n + Number.EPSILON) * x) / x\r\n}\r\n\r\nexport function getCurrencyNameFromAddress(addr:string)\r\n{\r\n    return addr === \"0xccc8cb5229b0ac8069c51fd58367fd1e622afd97\" ? \"gods\" : \"eth\"\r\n}\r\n\r\nexport function useAsyncEffect<T>(fn:() => Promise<T>)\r\n{\r\n    return useEffect(() =>\r\n    {\r\n        (async () =>\r\n        {\r\n            fn()\r\n        })()\r\n    })\r\n}\r\n\r\nexport function sleep(ms:number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function undercutEth(eth:number)\r\n{\r\n    return round(eth-0.0000001, 8)\r\n}\r\n\r\nexport function undercutGods(gods:number)\r\n{\r\n    return round(gods-0.00001, 6)\r\n}\r\n\r\nexport function undercut(currency:string, amount:number)\r\n{\r\n    return currency == \"gods\" ? undercutGods(amount) : undercutEth(amount)\r\n}","import {sleep} from '../Utils'\r\n\r\nexport async function fetchBalances (addr:string)\r\n{\r\n  const res = await fetch(\"https://api.x.immutable.com/v2/balances/\"+addr)\r\n  const json = await res.json()\r\n  return json\r\n}\r\n\r\nexport async function fetchAssetDetails(tokenAddress:string, tokenID:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/assets/\" + tokenAddress + \"/\" + tokenID)\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchAssets(addr:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/assets?direction=asc&order_by=name&page_size=2000&sell_orders=true&status=imx&user=\"+addr)\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchAssetsByName(addr:string, name:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/assets?name=\" + name + \"&direction=asc&order_by=name&page_size=2000&sell_orders=true&status=imx&user=\"+addr)\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchOrdersEth(id:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/orders?buy_token_type=ETH&direction=asc&include_fees=true&order_by=buy_quantity&page_size=10&sell_token_address=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c&status=active\")\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchOrdersByNameEth(name:string)\r\n{\r\n  const data = encodeURIComponent(\"{\\\"name\\\":[\\\"\"+name+\"\\\"],\\\"quality\\\":[\\\"Meteorite\\\"]}\")\r\n  const res = await fetch(\"https://api.x.immutable.com/v1/orders?page_size=5&sell_token_address=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c&buy_token_type=ETH&direction=asc&include_fees=true&order_by=buy_quantity&status=active&sell_metadata=\"+data)\r\n  return res.json()\r\n}\r\n\r\nexport async function fetchOrdersByNameGods(name:string)\r\n{\r\n  const data = encodeURIComponent(\"{\\\"name\\\":[\\\"\"+name+\"\\\"],\\\"quality\\\":[\\\"Meteorite\\\"]}\")\r\n  const res = await fetch(\"https://api.x.immutable.com/v1/orders?page_size=5&sell_token_address=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c&buy_token_address=0xccc8cb5229b0ac8069c51fd58367fd1e622afd97&direction=asc&include_fees=true&order_by=buy_quantity&status=active&sell_metadata=\"+data)\r\n  return res.json()\r\n}\r\n\r\nexport async function fetchOrdersByName(currency:string, name:string)\r\n{\r\n  return await (currency == \"gods\" ? fetchOrdersByNameGods(name) : fetchOrdersByNameEth(name))\r\n}\r\n\r\nexport async function getLowestOrderByNameEth(name:string)\r\n{\r\n  const json = await fetchOrdersByNameEth(name)\r\n  const buy = json.result[0].buy.data\r\n  return buy\r\n}\r\n\r\nexport async function getPriceByNameGods(name:string)\r\n{\r\n  const json = await fetchOrdersByNameGods(name)\r\n  const buy = json.result[0].buy.data\r\n  return buy.quantity / Math.pow(10,buy.decimals)\r\n}\r\n\r\nexport async function getPriceByNameEth(name:string)\r\n{\r\n  const json = await fetchOrdersByNameEth(name)\r\n  const buy = json.result[0].buy.data\r\n  return buy.quantity / Math.pow(10,buy.decimals)\r\n}\r\n\r\nexport async function waitOrder(address:string, tokenName:string, orderID:number)\r\n{\r\n  var count = 0\r\n  while(count < 20)\r\n  {\r\n      const newAssets = await fetchAssetsByName(address, tokenName)\r\n      if(newAssets.result.some((no:any) => no.orders?.sell_orders?.some((so:any) => so.order_id == orderID)))\r\n      {\r\n        return true\r\n      }\r\n      count++\r\n      await sleep(1000)\r\n  }\r\n  return false\r\n}","import { Link } from '@imtbl/imx-sdk';\r\n\r\nexport async function sell(token:any, price:number, currencyAddress?:string):Promise<number>\r\n{\r\n    const link = new Link('https://link.x.immutable.com');\r\n    try\r\n    {\r\n        const res = await link.sell({\r\n            amount: price.toString(),\r\n            tokenId: token.token_id,\r\n            tokenAddress: token.token_address,\r\n            currencyAddress: currencyAddress\r\n        })\r\n        console.log(\"sell done\")\r\n        console.log(res)\r\n        const num = (res as unknown) as number\r\n        return num\r\n    }\r\n    catch(ex)\r\n    {\r\n        console.log(\"EXCEPTION\")\r\n        console.log(ex)\r\n        return -1\r\n    }\r\n}\r\n\r\nexport async function sellEth(token:any, price:number):Promise<number>\r\n{\r\n    return sell(token, price)\r\n}\r\n\r\nexport async function sellGods(token:any, price:number):Promise<number>\r\n{\r\n    return sell(token, price, \"0xccc8cb5229b0ac8069c51fd58367fd1e622afd97\")\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport TokenList from '../Components/TokenImageDisplayList'\r\nimport * as imx from '../Api/Imx'\r\nimport { useAddress } from '../Context/GlobalContextProvider'\r\nimport { TokenDisplayProps } from '../Components/TokenImageDisplayList'\r\nimport { getCurrencyNameFromAddress, undercut, undercutEth, undercutGods, useAsyncEffect } from '../Utils'\r\nimport { Link, ETHTokenType } from '@imtbl/imx-sdk';\r\nimport * as link from '../Api/link'\r\n\r\ntype TokenListDisplayProps = {\r\n    children:JSX.Element[]\r\n}\r\nfunction TokenListDisplay(p:TokenListDisplayProps)\r\n{\r\n    return (<div className=\"token-list-container\">{p.children}</div>)\r\n}\r\n\r\ntype ImageDisplayProps = {\r\n    url:string\r\n}\r\nfunction ImageDisplay(props:ImageDisplayProps)\r\n{\r\n    return (<div className='token-list-card'>\r\n        <img className='token-list-image' src={props.url}/>\r\n    </div>)\r\n}\r\n\r\ntype OrderDisplayProps = {\r\n    token:any\r\n}\r\nfunction OrderDisplay(p:OrderDisplayProps)\r\n{\r\n    const sellOrder = p.token.orders.sell_orders[0]\r\n    var [amount, setAmount] = useState(sellOrder.buy_quantity / Math.pow(10,sellOrder.buy_decimals))\r\n    const currency = getCurrencyNameFromAddress(sellOrder.contract_address)\r\n    const address = useAddress()\r\n\r\n    var [price, setPrice] = useState(0)\r\n    var [selling, setSelling] = useState(false)\r\n\r\n    async function relist()\r\n    {\r\n        console.log(\"relist \" + address)\r\n        console.log(p.token)\r\n        setSelling(true)\r\n        console.log(\"selling \" + p.token.name + \"   \" + price)\r\n        \r\n        const orders = await imx.fetchOrdersByName(currency, p.token.name)\r\n        const order = orders.result[0]\r\n        const currentAmount = order.buy.data.quantity / Math.pow(10,order.buy.data.decimals)\r\n        const undercutPrice = order.user == address ? currentAmount : undercut(currency, currentAmount)\r\n        console.log((order.user == address ? \"USER\" : \"UNDERCUT\") + \" \" + (order.user == address ? price : undercut(currency, price)))\r\n\r\n        currency == \"gods\" ? (await link.sellGods(p.token, undercutPrice)) : (await link.sellEth(p.token, undercutPrice))\r\n        \r\n        setAmount(undercutPrice)\r\n        setSelling(false)\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        (async () =>\r\n        {\r\n            const newPrice = currency == \"gods\" ? await imx.getPriceByNameGods(p.token.name) : await imx.getPriceByNameEth(p.token.name)\r\n            setPrice(newPrice)\r\n        })()\r\n    }, [amount])\r\n\r\n    return (<div>\r\n        <div>current: {amount} {currency}</div>\r\n        <div>lowest : {price} {currency}</div>\r\n        { selling == false && price != 0 && amount > price ? <button onClick={relist}>relist at lowest</button> : null }\r\n    </div>)\r\n}\r\n\r\nexport default function OrdersPage()\r\n{\r\n    var [ orders, setOrders ] = useState<any[]>([])\r\n    var address = useAddress()\r\n\r\n    useEffect(() => {(async () =>\r\n    {\r\n        console.log(\"fetching assets from \" + address)\r\n        const responds = await imx.fetchAssets(address)\r\n        const assetsWithSellOrders = responds.result.filter((a:any) => a.orders.sell_orders?.length > 0)\r\n        console.log(assetsWithSellOrders)\r\n        setOrders(assetsWithSellOrders)\r\n    })()}, [address])\r\n\r\n    return(\r\n        <div>\r\n            <TokenListDisplay>\r\n                { orders.map((t,i) =>\r\n                    <div key={i}>\r\n                        <ImageDisplay url={t.metadata.image}/>\r\n                        <OrderDisplay token={t}/>\r\n                    </div>\r\n                )}\r\n            </TokenListDisplay>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport * as imx from '../Api/Imx'\r\nimport { useTotalAssetValueAdd } from '../Context/TotalAssetValueContext'\r\nimport { useEthPrice, useGodsPrice, useAddress } from '../Context/GlobalContextProvider'\r\nimport { round, sleep } from '../Utils'\r\nimport * as link from '../Api/link'\r\n\r\ntype TokenDisplayProps =\r\n{\r\n    tokenGrp:any[]\r\n    onChange:()=>void\r\n}\r\n\r\nexport default function TokenSummaryDisplay(props:TokenDisplayProps)\r\n{\r\n    var [tokenName, tokensx] = props.tokenGrp\r\n    var [tokens, setTokens] = useState(tokensx)\r\n    var [selling, setSelling] = useState(false)\r\n    var [amountEth, setAmountEth] = useState(0)\r\n    var [amountGods, setAmountGods] = useState(0)\r\n    var addTotalAssetValue = useTotalAssetValueAdd()\r\n    var ethPrice = useEthPrice()\r\n    var godsPrice = useGodsPrice()\r\n    var address = useAddress()\r\n\r\n    async function sellEth()\r\n    {\r\n        const token = tokens.find((t:any) => t.orders.sell_orders == undefined)\r\n        console.log(\"sell eth \" + tokenName + \" \" + token.token_id)\r\n\r\n        const orders = await imx.fetchOrdersByNameEth(tokenName)\r\n        const order = orders.result[0]\r\n\r\n        const currentAmountEth = order.buy.data.quantity / Math.pow(10,order.buy.data.decimals)\r\n        const newAmountEth = order.user == address ? currentAmountEth : round(currentAmountEth-0.0000001, 8)\r\n        \r\n        setSelling(true)\r\n        var sellOrderID = await link.sellEth(token, newAmountEth)\r\n        if(sellOrderID == -1)\r\n        {\r\n            setSelling(false)\r\n            return;\r\n        }\r\n        \r\n        const waitResult = await imx.waitOrder(address, tokenName, sellOrderID)\r\n        setSelling(false)\r\n        if(!waitResult)\r\n            return\r\n\r\n        setTokens((await imx.fetchAssetsByName(address, tokenName)).result)\r\n        setAmountEth(newAmountEth)\r\n    }\r\n\r\n    async function sellGods()\r\n    {\r\n        const token = tokens.find((t:any) => t.orders.sell_orders == undefined)\r\n        console.log(\"sell gods \" + tokenName + \" \" + token.token_id)\r\n\r\n        const orders = await imx.fetchOrdersByNameGods(tokenName)\r\n        const order = orders.result[0]\r\n\r\n        const currentAmountGods = order.buy.data.quantity / Math.pow(10,order.buy.data.decimals)\r\n\r\n        const newAmountGods = order.user == address ? currentAmountGods : round(currentAmountGods-0.00001, 6)\r\n        \r\n        setSelling(true)\r\n        var sellOrderID = await link.sellGods(token, newAmountGods)\r\n        if(sellOrderID == -1)\r\n        {\r\n            setSelling(false)\r\n            return;\r\n        }\r\n        \r\n        const waitResult = await imx.waitOrder(address, tokenName, sellOrderID)\r\n        setSelling(false)\r\n        if(!waitResult)\r\n            return\r\n        \r\n        setTokens((await imx.fetchAssetsByName(address, tokenName)).result)\r\n        setAmountGods(newAmountGods)\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        const getPrice = async () =>\r\n        {\r\n            const ethRes = await imx.fetchOrdersByNameEth(tokenName)\r\n            if(ethRes.result.length != 0)\r\n            {\r\n                const ethQuantity = ethRes.result[0].buy.data.quantity/Math.pow(10,18)\r\n                setAmountEth(ethQuantity)\r\n                const usdValue = ethQuantity*ethPrice\r\n                addTotalAssetValue(usdValue*props.tokenGrp.length)\r\n            }\r\n            const godsRes = await imx.fetchOrdersByNameGods(tokenName)\r\n            if(godsRes.result.length != 0)\r\n            {\r\n                const godsQuantity = godsRes.result[0].buy.data.quantity/Math.pow(10,18)\r\n                setAmountGods(godsQuantity)\r\n                const usdValue = godsQuantity*godsPrice\r\n            }\r\n        }\r\n        getPrice()\r\n    }, [])\r\n\r\n    return (<div className='token-list-card'>\r\n        <img className='token-list-image' src={tokens[0].metadata.image}/>\r\n        <div>{tokenName} (x{tokens.length})</div>\r\n        <div>\r\n            <a>eth: {round(amountEth*ethPrice,2)}$</a>\r\n            { amountEth != 0 && tokens.some((t:any) => t.orders.sell_orders == undefined) && !selling ? <button onClick={sellEth}>sell</button> : <div></div>}\r\n        </div>\r\n        <div>\r\n            <a>gods: {round(amountGods*godsPrice,2)}$</a>\r\n            { amountGods != 0 && tokens.some((t:any) => t.orders.sell_orders == undefined) && !selling ? <button onClick={sellGods}>sell</button> : <div></div>}\r\n        </div>\r\n    </div>)\r\n}","import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport TokenSummaryDisplay from './TokenSummaryDisplay';\r\n\r\ntype TokenListProps =\r\n{\r\n  tokens:any[]\r\n  children:JSX.Element\r\n  onChange:() => void\r\n}\r\n\r\nexport default function TokenSummaryList(props:TokenListProps)\r\n{\r\n  if (props.tokens.length == 0)\r\n    return <div></div>\r\n    \r\n  const grouped = props.tokens.reduce((acc, itm) => {\r\n    if(!acc[itm.metadata.name])\r\n      acc[itm.metadata.name] = []\r\n    acc[itm.metadata.name].push(itm);\r\n    return acc;\r\n  }, {});\r\n\r\n  return (<div className=\"token-list-container\">{Object.entries(grouped).map((grp,i) => (<div key={i}><TokenSummaryDisplay onChange={props.onChange} tokenGrp={grp}/></div>))}</div>)\r\n}","import { useContext, useEffect, useState } from 'react';\r\nimport * as imx from '../Api/Imx'\r\nimport TokenSummaryList from '../Components/TokenSummaryList';\r\nimport { useTotalAssetValue } from '../Context/TotalAssetValueContext'\r\nimport { useEthPrice, useGodsPrice, useAddress } from '../Context/GlobalContextProvider'\r\nimport { round } from '../Utils'\r\n\r\nexport default function TokenSummaryPage()\r\n{\r\n    var [tokens, setTokens] = useState([])\r\n    var [ethBalance, setEthBalance] = useState(0)\r\n    var [godsBalance, setGodsBalance] = useState(0)\r\n    var address = useAddress()\r\n    const ethPrice = useEthPrice()\r\n    const godsPrice = useGodsPrice()\r\n    const totalAssetValue = useTotalAssetValue()\r\n\r\n    async function onChange()\r\n    {\r\n        console.log(\"CHANGE\")\r\n        const responds = await imx.fetchAssets(address)\r\n        setTokens(responds.result)\r\n    }\r\n\r\n    useEffect(() =>{(async () => {\r\n        if(address == \"\")return\r\n        const responds = await imx.fetchAssets(address)\r\n        setTokens(responds.result)\r\n    })()}, [address])\r\n\r\n    useEffect(() =>{(async () => {\r\n        if(address == \"\")return\r\n        console.log(\"GET BALANCE\")\r\n        const balancesResponds = await imx.fetchBalances(address);\r\n        const newGods = balancesResponds.result.find((x:any) => x.symbol === \"GODS\")?.balance / Math.pow(10,18)\r\n        const newEth = balancesResponds.result.find((x:any) => x.symbol === \"ETH\")?.balance / Math.pow(10,18)\r\n        \r\n        setEthBalance(newEth || 0)\r\n        setGodsBalance(newGods || 0)\r\n    })()}, [address, tokens])\r\n\r\n    const balanceTotal = godsBalance*godsPrice + ethBalance*ethPrice\r\n    const total = totalAssetValue + balanceTotal\r\n\r\n    return (<div>\r\n        <div>coingecko eth price: {ethPrice}$</div>\r\n        <div>coingecko gods price: {godsPrice}$</div>\r\n        <div>_____</div>\r\n        <div>GODS: {round(godsBalance*godsPrice,2)}$ ({round(godsBalance,2)})</div>\r\n        <div>ETH: {round(ethBalance*ethPrice,2)}$ ({round(ethBalance,4)})</div>\r\n        <div>TOTAL: {round(balanceTotal,2)}$</div>\r\n        <div>_____</div>\r\n        <div>TOTAL: {round(total,2)}$</div>\r\n        <TokenSummaryList tokens={tokens} onChange={onChange}><></></TokenSummaryList>\r\n    </div>)\r\n}","import './App.css';\nimport { GlobalContextProvider } from './Context/GlobalContextProvider'\nimport Navbar from './Components/Navbar/Navbar';\nimport ButtonMetaMask from './Components/MetaMaskButton'\nimport { TotalAssetValueProvider } from './Context/TotalAssetValueContext'\nimport OrdersPage from './Pages/OrdersPage';\nimport TokenSummaryPage from './Pages/TokenSummaryPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalContextProvider>\n        <>\n          <ButtonMetaMask/>\n          <Navbar items=\n            {[\n              {label: \"Inventory\", page: (<TotalAssetValueProvider><TokenSummaryPage/></TotalAssetValueProvider>)},\n              {label: \"Orders\", page: (<OrdersPage></OrdersPage>)},\n              {label: \"GUDecks\", page: <></>}\n            ]}/>\n        </>\n      </GlobalContextProvider>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { MetaMaskProvider } from \"metamask-react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MetaMaskProvider>\n      <App />\n    </MetaMaskProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}