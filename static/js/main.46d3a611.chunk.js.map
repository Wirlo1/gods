{"version":3,"sources":["Api/gecko.ts","Context/GlobalContextProvider.tsx","Components/Navbar/Navbar.tsx","Components/MetaMaskButton.tsx","Context/TotalAssetValueContext.tsx","Api/Imx.ts","Utils.ts","Pages/OrdersPage.tsx","Api/link.ts","Components/TokenSummaryDisplay.tsx","Components/TokenSummaryList.tsx","Pages/TokenSummaryPage.tsx","App.tsx","index.tsx"],"names":["fetchCoinPrice","coinID","a","fetch","then","x","json","usd","fetchEthPrice","fetchGodsPrice","EthPriceContext","React","createContext","GodsPriceContext","SetAddressContext","AddressContext","useEthPrice","useContext","useGodsPrice","useAddress","GlobalContextProvider","children","useState","ethPrice","setEthPrice","godsPrice","setGodsPrice","addr","setAddr","useEffect","gecko","Provider","value","Navbar","props","currentPage","setCurrentPage","console","log","className","items","map","item","i","onClick","label","page","ButtonMetaMask","useMetaMask","status","connect","account","setAddress","TotalAssetValueContext","TotalAssetValueAddContext","n","TotalAssetValueProvider","totalValue","totalValueSet","v","old","fetchBalances","res","fetchAssets","fetchAssetsByName","name","fetchOrdersByNameEth","data","encodeURIComponent","fetchOrdersByNameGods","getPriceByNameGods","buy","result","quantity","Math","pow","decimals","getPriceByNameEth","round","d","Number","EPSILON","getCurrencyNameFromAddress","sleep","ms","Promise","resolve","setTimeout","TokenListDisplay","p","ImageDisplay","src","url","OrderDisplay","sellOrder","token","orders","sell_orders","amount","buy_quantity","buy_decimals","currency","contract_address","address","price","setPrice","link","Link","sell","tokenId","tokenAddress","imx","newPrice","OrdersPage","setOrders","responds","assetsWithSellOrders","filter","length","t","metadata","image","currencyAddress","toString","token_id","token_address","sellEth","sellGods","TokenSummaryDisplay","tokenGrp","tokenName","tokensx","tokens","setTokens","selling","setSelling","amountEth","setAmountEth","amountGods","setAmountGods","addTotalAssetValue","find","undefined","order","currentAmountEth","newAmountEth","user","sellOrderID","count","newAssets","some","no","so","order_id","newAmountGods","onChange","getPrice","ethRes","ethQuantity","godsRes","godsQuantity","TokenSummaryList","grouped","reduce","acc","itm","push","Object","entries","grp","TokenSummaryPage","ethBalance","setEthBalance","godsBalance","setGodsBalance","totalAssetValue","balancesResponds","newGods","symbol","balance","newEth","balanceTotal","total","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4nBAAO,SAAeA,EAAtB,kC,4CAAO,WAA+BC,GAA/B,SAAAC,EAAA,+EAEEC,MAAM,qDAAqDF,EAAO,sBACtEG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,GAAQM,QAJlB,4C,sBAOA,SAAeC,IAAtB,+B,4CAAO,sBAAAN,EAAA,+EAEIF,EAAe,aAFnB,4C,sBAKA,SAAeS,IAAtB,+B,4CAAO,sBAAAP,EAAA,+EAEIF,EAAe,mBAFnB,4C,iCCTDU,EAAkBC,IAAMC,cAAc,GACtCC,EAAmBF,IAAMC,cAAc,GACvCE,EAAoBH,IAAMC,eAAc,SAACP,OACzCU,EAAiBJ,IAAMC,cAAc,IAEpC,SAASI,IAAgB,OAAOC,qBAAWP,GAC3C,SAASQ,IAAiB,OAAOD,qBAAWJ,GAE5C,SAASM,IAAe,OAAOF,qBAAWF,GAE1C,SAASK,EAAT,GACN,IADuCC,EACxC,EADwCA,SAEpC,EAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAQK,EAAR,KAAcC,EAAd,KAOA,OALAC,qBAAU,WAAQ,sBAAC,sBAAA3B,EAAA,kEACXsB,EADW,SACOM,IADP,8CAEXJ,EAFW,SAEQI,IAFR,6EAAD,MAMd,cAACf,EAAegB,SAAhB,CAAyBC,MAAOL,EAAhC,SACA,cAACb,EAAkBiB,SAAnB,CAA4BC,MAAOJ,EAAnC,SACA,cAAClB,EAAgBqB,SAAjB,CAA0BC,MAAOT,EAAjC,SACA,cAACV,EAAiBkB,SAAlB,CAA2BC,MAAOP,EAAlC,SACKJ,U,OCfE,SAASY,EAAOC,GAE3B,IAAI,EAAgCZ,oBAAU,GAA9C,mBAAKa,EAAL,KAAkBC,EAAlB,KAEA,OADAC,QAAQC,IAAI,gBAAkBH,GAE1B,gCACI,qBAAKI,UAAU,gBAAf,SACI,oBAAIA,UAAU,WAAd,SACKL,EAAMM,MAAMC,KAAI,SAACC,EAAKC,GAAN,OAAa,6BAAa,wBAAQC,QAAS,SAAAvC,GAAC,OAAI+B,EAAeO,IAAIJ,UAAU,eAAnD,SAAmEG,EAAKG,SAA3EF,UAGhD,+BACsB,IAAjBR,EAAsB,6BAASD,EAAMM,MAAML,GAAaW,U,aCtB1D,SAASC,IAEtB,MAAqCC,wBAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,QACnBC,EFGiCnC,qBAAWH,GEDlDe,qBAAU,WAEK,aAAVoB,GACDG,EAAWD,GAAW,MACvB,CAACF,IAEJ,IAAIJ,EAAQ,KAOZ,MANe,iBAAXI,IACFJ,EAAQ,4EACK,gBAAXI,IACFJ,EAAQ,6DACK,eAAXI,IACFJ,EAAQ,iDACK,cAAXI,EACK,MACM,iBAAXA,IACFJ,EAAQ,wBAAQD,QAASM,EAAjB,kCAEF,mBAAGX,UAAU,mBAAb,SAAiCM,KCzB3C,IAAMQ,EAAyB1C,IAAMC,cAAc,GAC7C0C,EAA4B3C,IAAMC,eAAc,SAAC2C,OAKhD,SAASC,EAAT,GACN,IADyCnC,EAC1C,EAD0CA,SAEtC,EAAoCC,mBAAS,GAA7C,mBAAOmC,EAAP,KAAmBC,EAAnB,KAKA,OACI,cAACL,EAAuBtB,SAAxB,CAAiCC,MAAOyB,EAAxC,SACI,cAACH,EAA0BvB,SAA3B,CAAoCC,MAN5C,SAAkB2B,GACdD,GAAc,SAAAE,GAAG,OAAIA,EAAID,MAKrB,SACKtC,MClBV,SAAewC,EAAtB,kC,4CAAO,WAA8BlC,GAA9B,iBAAAzB,EAAA,sEAEaC,MAAM,2CAA2CwB,GAF9D,cAECmC,EAFD,gBAGcA,EAAIxD,OAHlB,cAGCA,EAHD,yBAIEA,GAJF,4C,sBAaA,SAAeyD,EAAtB,kC,4CAAO,WAA2BpC,GAA3B,SAAAzB,EAAA,+EAEEC,MAAM,qHAAqHwB,GAC/HvB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,WAHV,4C,sBAMA,SAAe0D,EAAtB,oC,4CAAO,WAAiCrC,EAAasC,GAA9C,SAAA/D,EAAA,+EAEEC,MAAM,8CAAgD8D,EAAO,gFAAgFtC,GACjJvB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,WAHV,4C,sBAYA,SAAe4D,EAAtB,kC,4CAAO,WAAoCD,GAApC,iBAAA/D,EAAA,6DAECiE,EAAOC,mBAAmB,aAAgBH,EAAK,+BAFhD,SAGa9D,MAAM,wNAAwNgE,GAH3O,cAGCL,EAHD,yBAIEA,EAAIxD,QAJN,4C,sBAOA,SAAe+D,EAAtB,kC,4CAAO,WAAqCJ,GAArC,iBAAA/D,EAAA,6DAECiE,EAAOC,mBAAmB,aAAgBH,EAAK,+BAFhD,SAGa9D,MAAM,kQAAkQgE,GAHrR,cAGCL,EAHD,yBAIEA,EAAIxD,QAJN,4C,sBAcA,SAAegE,EAAtB,kC,4CAAO,WAAkCL,GAAlC,iBAAA/D,EAAA,sEAEcmE,EAAsBJ,GAFpC,cAEC3D,EAFD,OAGCiE,EAAMjE,EAAKkE,OAAO,GAAGD,IAAIJ,KAH1B,kBAIEI,EAAIE,SAAWC,KAAKC,IAAI,GAAGJ,EAAIK,WAJjC,4C,sBAOA,SAAeC,EAAtB,kC,4CAAO,WAAiCZ,GAAjC,iBAAA/D,EAAA,sEAEcgE,EAAqBD,GAFnC,cAEC3D,EAFD,OAGCiE,EAAMjE,EAAKkE,OAAO,GAAGD,IAAIJ,KAH1B,kBAIEI,EAAIE,SAAWC,KAAKC,IAAI,GAAGJ,EAAIK,WAJjC,4C,sBCzDA,SAASE,EAAMvB,EAAUwB,GAE5B,GAAS,IAANxB,EACC,OAAO,EACX,IAAMlD,EAAIqE,KAAKC,IAAI,GAAGI,GACtB,OAAOL,KAAKI,OAAOvB,EAAIyB,OAAOC,SAAW5E,GAAKA,EAG3C,SAAS6E,EAA2BvD,GAEvC,MAAgB,+CAATA,EAAwD,OAAS,MAcrE,SAASwD,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,aCLtD,SAASI,EAAiBC,GAEtB,OAAQ,qBAAKlD,UAAU,uBAAf,SAAuCkD,EAAEpE,WAMrD,SAASqE,EAAaxD,GAElB,OAAQ,qBAAKK,UAAU,kBAAf,SACJ,qBAAKA,UAAU,mBAAmBoD,IAAKzD,EAAM0D,QAOrD,SAASC,EAAaJ,GAElB,IAAMK,EAAYL,EAAEM,MAAMC,OAAOC,YAAY,GACvCC,EAASJ,EAAUK,aAAezB,KAAKC,IAAI,GAAGmB,EAAUM,cACxDC,EAAWnB,EAA2BY,EAAUQ,kBAChDC,EAAUpF,IAEZ,EAAoBG,mBAAS,GAAjC,mBAAKkF,EAAL,KAAYC,EAAZ,KANJ,4CAQI,4BAAAvG,EAAA,6DAEImC,QAAQC,IAAI,UAAYiE,GACxBlE,QAAQC,IAAImD,EAAEM,OACRW,EAAO,IAAIC,IAAK,gCAJ1B,SAKsBD,EAAKE,KAAK,CACxBV,OAAQ,KACRW,QAAS,MACTC,aAAc,+CARtB,0DARJ,sBA8BI,OAVAjF,qBAAU,WAEN,sBAAC,4BAAA3B,EAAA,yDAEgC,QAAZmG,EAFpB,gCAE+CU,EAAuBtB,EAAEM,MAAM9B,MAF9E,yDAE4F8C,EAAsBtB,EAAEM,MAAM9B,MAF1H,0BAES+C,EAFT,KAGG3E,QAAQC,IAAI0E,GACZP,EAASO,GAJZ,2CAAD,KAMD,CAACd,IAEI,gCACJ,4CAAeA,EAAf,IAAwBG,KACxB,4CAAeG,EAAf,IAAuBH,KACZ,GAATG,GAAcN,GAAUM,EAAQ,wBAAQ5D,QAjClD,2CAiC0C,8BAAqD,QAIhF,SAASqE,IAEpB,IAAI,EAAwB3F,mBAAgB,IAA5C,mBAAM0E,EAAN,KAAckB,EAAd,KACIX,EAAUpF,IAWd,OATAU,qBAAU,WAAO,sBAAC,8BAAA3B,EAAA,6DAEdmC,QAAQC,IAAI,wBAA0BiE,GAFxB,SAGSQ,EAAgBR,GAHzB,OAGRY,EAHQ,OAIRC,EAAuBD,EAAS3C,OAAO6C,QAAO,SAACnH,GAAD,aAAW,UAAAA,EAAE8F,OAAOC,mBAAT,eAAsBqB,QAAS,KAC9FjF,QAAQC,IAAI8E,GACZF,EAAUE,GANI,0CAAD,KAOV,CAACb,IAGJ,8BACI,cAACf,EAAD,UACMQ,EAAOvD,KAAI,SAAC8E,EAAE5E,GAAH,OACT,gCACI,cAAC+C,EAAD,CAAcE,IAAK2B,EAAEC,SAASC,QAC9B,cAAC5B,EAAD,CAAcE,MAAOwB,MAFf5E,UC9FvB,SAAeiE,GAAtB,uC,8CAAO,WAAoBb,EAAWS,EAAckB,GAA7C,eAAAxH,EAAA,6DAEGwG,EAAO,IAAIC,IAAK,gCAFnB,SAGWD,EAAKE,KAAK,CACpBV,OAAQM,EAAMmB,WACdd,QAASd,EAAM6B,SACfd,aAAcf,EAAM8B,cACpBH,gBAAiBA,IAPlB,oF,sBAWA,SAAeI,GAAtB,qC,8CAAO,WAAuB/B,EAAWS,GAAlC,SAAAtG,EAAA,+EAEI0G,GAAKb,EAAOS,IAFhB,4C,sBAKA,SAAeuB,GAAtB,qC,8CAAO,WAAwBhC,EAAWS,GAAnC,SAAAtG,EAAA,+EAEI0G,GAAKb,EAAOS,EAAO,+CAFvB,4C,sBCLQ,SAASwB,GAAoB9F,GAExC,IAAI,EAAJ,YAA2BA,EAAM+F,SAAjC,GAAKC,EAAL,KAAgBC,EAAhB,KACI,EAAsB7G,mBAAS6G,GAAnC,mBAAKC,EAAL,KAAaC,EAAb,KACI,EAAwB/G,oBAAS,GAArC,mBAAKgH,EAAL,KAAcC,EAAd,KACI,EAA4BjH,mBAAS,GAAzC,mBAAKkH,EAAL,KAAgBC,EAAhB,KACI,EAA8BnH,mBAAS,GAA3C,mBAAKoH,EAAL,KAAiBC,EAAjB,KACIC,ELdyC3H,qBAAWqC,GKepD/B,EAAWP,IACXS,EAAYP,IACZqF,EAAUpF,IATlB,4CAWI,0CAAAjB,EAAA,6DAEU6F,EAAQqC,EAAOS,MAAK,SAACtB,GAAD,YAAmCuB,GAAxBvB,EAAEvB,OAAOC,eAC9C5D,QAAQC,IAAI,YAAc4F,EAAY,IAAMnC,EAAM6B,UAHtD,SAKyBb,EAAyBmB,GALlD,cAKUlC,EALV,OAMU+C,EAAQ/C,EAAOxB,OAAO,GAC5BnC,QAAQC,IAAIyG,GAENC,EAAmBD,EAAMxE,IAAIJ,KAAKM,SAAWC,KAAKC,IAAI,GAAGoE,EAAMxE,IAAIJ,KAAKS,UAC9EvC,QAAQC,IAAI,mBAAqB0G,GAE3BC,EAAeF,EAAMG,MAAQ3C,EAAUyC,EAAmBlE,EAAMkE,EAAiB,KAAW,GAClG3G,QAAQC,IAAI,gBACZD,QAAQC,IAAIyG,GACZ1G,QAAQC,IAAIyG,EAAMG,MAAQ3C,EAAU,QAAU,YAE1C4C,EAAc,EAjBtB,UAoBQZ,GAAW,GApBnB,UAqB4B7B,GAAaX,EAAOkD,GArBhD,QAqBQE,EArBR,iEAyBQZ,GAAW,GACXlG,QAAQC,IAAI,aACZD,QAAQC,IAAR,MA3BR,2BA+BQ8G,EAAQ,EA/BhB,aAgCUA,EAAQ,IAhClB,kCAkCgCrC,EAAsBR,EAAS2B,GAlC/D,aAkCcmB,EAlCd,QAmCqB7E,OAAO8E,MAAK,SAACC,GAAD,yBAAYA,EAAGvD,cAAf,iBAAY,EAAWC,mBAAvB,aAAY,EAAwBqD,MAAK,SAACE,GAAD,OAAYA,EAAGC,UAAYN,QAnCrG,wBAqCYd,EAAUgB,EAAU7E,QACpBiE,EAAaQ,GAtCzB,oCAyCQG,IAzCR,UA0CcjE,EAAM,KA1CpB,gCA4CIoD,GAAW,GA5Cf,4DAXJ,kEA0DI,8BAAArI,EAAA,6DAEUwJ,EAAgB5E,EAAM4D,EAAW,KAAQ,GACzC3C,EAAQqC,EAAOS,MAAK,SAACtB,GAAD,YAAmCuB,GAAxBvB,EAAEvB,OAAOC,eAHlD,SAIUS,GAAcX,EAAO2D,GAJ/B,OAKIxH,EAAMyH,WALV,4CA1DJ,sBAyFI,OAvBA9H,qBAAU,WAEN,IAAM+H,EAAQ,uCAAG,kCAAA1J,EAAA,sEAEQ6G,EAAyBmB,GAFjC,cAGc,IADrB2B,EAFO,QAGHrF,OAAO8C,SAEPwC,EAAcD,EAAOrF,OAAO,GAAGD,IAAIJ,KAAKM,SAASC,KAAKC,IAAI,GAAG,IACnE8D,EAAaqB,GAEblB,EADiBkB,EAAYvI,EACDW,EAAM+F,SAASX,SARlC,SAUSP,EAA0BmB,GAVnC,OAWe,IADtB6B,EAVO,QAWFvF,OAAO8C,SAER0C,EAAeD,EAAQvF,OAAO,GAAGD,IAAIJ,KAAKM,SAASC,KAAKC,IAAI,GAAG,IACrEgE,EAAcqB,GACGA,EAAavI,GAfrB,2CAAH,qDAkBdmI,MACD,IAEK,sBAAKrH,UAAU,kBAAf,UACJ,qBAAKA,UAAU,mBAAmBoD,IAAKyC,EAAO,GAAGZ,SAASC,QAC1D,gCAAMS,EAAN,MAAoBE,EAAOd,OAA3B,OACA,gCACI,sCAASxC,EAAM0D,EAAUjH,EAAS,GAAlC,OACE6G,EAAOkB,MAAK,SAAC/B,GAAD,YAAmCuB,GAAxBvB,EAAEvB,OAAOC,iBAA8BqC,EAAU,wBAAQ1F,QA9F9F,2CA8FsF,kBAA0C,2BAExH,gCACI,uCAAUkC,EAAM4D,EAAWjH,EAAU,GAArC,OACE2G,EAAOkB,MAAK,SAAC/B,GAAD,YAAmCuB,GAAxBvB,EAAEvB,OAAOC,iBAA8BqC,EAAU,wBAAQ1F,QAlG9F,2CAkGsF,kBAA2C,8BCtGlH,SAASqH,GAAiB/H,GAEvC,GAA2B,GAAvBA,EAAMkG,OAAOd,OACf,OAAO,wBAET,IAAM4C,EAAUhI,EAAMkG,OAAO+B,QAAO,SAACC,EAAKC,GAIxC,OAHID,EAAIC,EAAI7C,SAASvD,QACnBmG,EAAIC,EAAI7C,SAASvD,MAAQ,IAC3BmG,EAAIC,EAAI7C,SAASvD,MAAMqG,KAAKD,GACrBD,IACN,IAEH,OAAQ,qBAAK7H,UAAU,uBAAf,SAAuCgI,OAAOC,QAAQN,GAASzH,KAAI,SAACgI,EAAI9H,GAAL,OAAY,8BAAa,cAACqF,GAAD,CAAqB2B,SAAUzH,EAAMyH,SAAU1B,SAAUwC,KAA5D9H,QCfpF,SAAS+H,KAEpB,IAAI,EAAsBpJ,mBAAS,IAAnC,mBAAK8G,EAAL,KAAaC,EAAb,KACI,EAA8B/G,mBAAS,GAA3C,mBAAKqJ,EAAL,KAAiBC,EAAjB,KACI,EAAgCtJ,mBAAS,GAA7C,mBAAKuJ,EAAL,KAAkBC,EAAlB,KACIvE,EAAUpF,IACRI,EAAWP,IACXS,EAAYP,IACZ6J,EPVoC9J,qBAAWoC,GOGzD,4CASI,4BAAAnD,EAAA,6DAEImC,QAAQC,IAAI,UAFhB,SAG2ByE,EAAgBR,GAH3C,OAGUY,EAHV,OAIIkB,EAAUlB,EAAS3C,QAJvB,4CATJ,sBAgBI3C,qBAAU,WAAM,sBAAC,4BAAA3B,EAAA,yDACC,IAAXqG,EADU,iEAEUQ,EAAgBR,GAF1B,OAEPY,EAFO,OAGbkB,EAAUlB,EAAS3C,QAHN,0CAAD,KAIT,CAAC+B,IAER1E,qBAAU,WAAM,sBAAC,oCAAA3B,EAAA,yDACC,IAAXqG,EADU,wDAEblE,QAAQC,IAAI,eAFC,SAGkByE,EAAkBR,GAHpC,OAGPyE,EAHO,OAIPC,GAAU,UAAAD,EAAiBxG,OAAOqE,MAAK,SAACxI,GAAD,MAAwB,SAAbA,EAAE6K,iBAA1C,eAA8DC,SAAUzG,KAAKC,IAAI,GAAG,IAC9FyG,GAAS,UAAAJ,EAAiBxG,OAAOqE,MAAK,SAACxI,GAAD,MAAwB,QAAbA,EAAE6K,iBAA1C,eAA6DC,SAAUzG,KAAKC,IAAI,GAAG,IAElGiG,EAAcQ,GAAU,GACxBN,EAAeG,GAAW,GARb,2CAAD,KAST,CAAC1E,EAAS6B,IAEjB,IAAMiD,EAAeR,EAAYpJ,EAAYkJ,EAAWpJ,EAClD+J,EAAQP,EAAkBM,EAEhC,OAAQ,gCACJ,wDAA2B9J,EAA3B,OACA,yDAA4BE,EAA5B,OACA,wCACA,yCAAYqD,EAAM+F,EAAYpJ,EAAU,GAAxC,MAA+CqD,EAAM+F,EAAY,GAAjE,OACA,wCAAW/F,EAAM6F,EAAWpJ,EAAS,GAArC,MAA4CuD,EAAM6F,EAAW,GAA7D,OACA,0CAAa7F,EAAMuG,EAAa,GAAhC,OACA,wCACA,0CAAavG,EAAMwG,EAAM,GAAzB,OACA,cAACrB,GAAD,CAAkB7B,OAAQA,EAAQuB,SA7C1C,2CA6CQ,SAAsD,kCC5B/C4B,OAjBf,WACE,OACE,qBAAKhJ,UAAU,MAAf,SACE,cAACnB,EAAD,UACE,qCACE,cAAC2B,EAAD,IACA,cAAC,EAAD,CAAQP,MACL,CACC,CAACK,MAAO,YAAaC,KAAO,cAACU,EAAD,UAAyB,cAACkH,GAAD,OACrD,CAAC7H,MAAO,SAAUC,KAAO,cAACmE,EAAD,gBCXvCuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,mBAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.46d3a611.chunk.js","sourcesContent":["export async function fetchCoinPrice (coinID:string)\r\n{\r\n  return fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=\"+coinID+\"&vs_currencies=usd\")\r\n    .then(x => x.json())\r\n    .then(x => x[coinID].usd)\r\n}\r\n\r\nexport async function fetchEthPrice ()\r\n{\r\n    return fetchCoinPrice(\"ethereum\")\r\n}\r\n\r\nexport async function fetchGodsPrice ()\r\n{\r\n    return fetchCoinPrice(\"gods-unchained\")\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport * as gecko from '../Api/gecko'\r\n\r\nconst EthPriceContext = React.createContext(0)\r\nconst GodsPriceContext = React.createContext(0)\r\nconst SetAddressContext = React.createContext((x:string) => { })\r\nconst AddressContext = React.createContext(\"\")\r\n\r\nexport function useEthPrice() { return useContext(EthPriceContext) }\r\nexport function useGodsPrice() { return useContext(GodsPriceContext) }\r\nexport function useSetAddress() { return useContext(SetAddressContext) }\r\nexport function useAddress() { return useContext(AddressContext) }\r\n\r\nexport function GlobalContextProvider({ children }:{ children:JSX.Element })\r\n{\r\n    const [ethPrice, setEthPrice] = useState(0)\r\n    const [godsPrice, setGodsPrice] = useState(0)\r\n    const [ addr, setAddr ] = useState(\"\")\r\n\r\n    useEffect(() => { (async () => {\r\n            setEthPrice(await gecko.fetchEthPrice())\r\n            setGodsPrice(await gecko.fetchGodsPrice())\r\n    })()})\r\n\r\n    return (\r\n        <AddressContext.Provider value={addr}>\r\n        <SetAddressContext.Provider value={setAddr}>\r\n        <EthPriceContext.Provider value={ethPrice}>\r\n        <GodsPriceContext.Provider value={godsPrice}>\r\n            {children}\r\n        </GodsPriceContext.Provider>\r\n        </EthPriceContext.Provider>\r\n        </SetAddressContext.Provider>\r\n        </AddressContext.Provider>\r\n    )\r\n}","import { useState } from 'react';\r\nimport './Navbar.css'\r\n\r\ntype NavbarItem =\r\n{\r\n    label:string\r\n    page:JSX.Element\r\n}\r\n\r\ntype Props =\r\n{\r\n    items:NavbarItem[]\r\n}\r\n\r\nexport default function Navbar(props:Props)\r\n{\r\n    var [currentPage, setCurrentPage] = useState(-1)\r\n    console.log(\"current page \" + currentPage)\r\n    return (\r\n        <div>\r\n            <nav className='nav-bar-items'>\r\n                <ul className='nav-menu'>\r\n                    {props.items.map((item,i) => (<li  key={i}><button onClick={x => setCurrentPage(i)} className='nav-bar-item'>{item.label}</button></li>))}\r\n                </ul>\r\n            </nav>\r\n            <div>\r\n                {currentPage === -1 ? (<></>) : props.items[currentPage].page}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { useMetaMask } from \"metamask-react\";\r\nimport { useSetAddress } from '../Context/GlobalContextProvider';\r\n\r\nexport default function ButtonMetaMask()\r\n{\r\n  const { status, connect, account } = useMetaMask();\r\n  const setAddress = useSetAddress()\r\n\r\n  useEffect(() => \r\n  {\r\n    if(status == \"connected\")\r\n      setAddress(account || \"\")\r\n  }, [status])\r\n\r\n  let label = null\r\n  if (status === \"initializing\")\r\n    label = <div>Synchronisation with MetaMask ongoing...</div>\r\n  if (status === \"unavailable\")\r\n    label = <div>MetaMask not available :(</div>\r\n  if (status === \"connecting\")\r\n    label = <div>Connecting...</div>\r\n  if (status === \"connected\")\r\n    return null\r\n  if (status === \"notConnected\")\r\n    label = <button onClick={connect}>Connect to MetaMask</button>\r\n\r\n  return (<a className='meta-mask-button'>{label}</a>)\r\n}","import React, { useContext, useState } from 'react'\r\n\r\nconst TotalAssetValueContext = React.createContext(0)\r\nconst TotalAssetValueAddContext = React.createContext((n:number) => {})\r\n\r\nexport function useTotalAssetValue() { return useContext(TotalAssetValueContext) }\r\nexport function useTotalAssetValueAdd() { return useContext(TotalAssetValueAddContext) }\r\n\r\nexport function TotalAssetValueProvider({ children }:{ children:JSX.Element })\r\n{\r\n    const [totalValue, totalValueSet] = useState(0)\r\n    function addValue(v:number) {\r\n        totalValueSet(old => old+v)\r\n    }\r\n\r\n    return (\r\n        <TotalAssetValueContext.Provider value={totalValue}>\r\n            <TotalAssetValueAddContext.Provider value={addValue}>\r\n                {children}\r\n            </TotalAssetValueAddContext.Provider>\r\n        </TotalAssetValueContext.Provider>\r\n    )\r\n}","export async function fetchBalances (addr:string)\r\n{\r\n  const res = await fetch(\"https://api.x.immutable.com/v2/balances/\"+addr)\r\n  const json = await res.json()\r\n  return json\r\n}\r\n\r\nexport async function fetchAssetDetails(tokenAddress:string, tokenID:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/assets/\" + tokenAddress + \"/\" + tokenID)\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchAssets(addr:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/assets?direction=asc&order_by=name&page_size=2000&sell_orders=true&status=imx&user=\"+addr)\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchAssetsByName(addr:string, name:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/assets?name=\" + name + \"&direction=asc&order_by=name&page_size=2000&sell_orders=true&status=imx&user=\"+addr)\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchOrdersEth(id:string)\r\n{\r\n  return fetch(\"https://api.x.immutable.com/v1/orders?buy_token_type=ETH&direction=asc&include_fees=true&order_by=buy_quantity&page_size=10&sell_token_address=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c&status=active\")\r\n    .then(x => x.json())\r\n}\r\n\r\nexport async function fetchOrdersByNameEth(name:string)\r\n{\r\n  const data = encodeURIComponent(\"{\\\"name\\\":[\\\"\"+name+\"\\\"],\\\"quality\\\":[\\\"Meteorite\\\"]}\")\r\n  const res = await fetch(\"https://api.x.immutable.com/v1/orders?page_size=5&sell_token_address=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c&buy_token_type=ETH&direction=asc&include_fees=true&order_by=buy_quantity&status=active&sell_metadata=\"+data)\r\n  return res.json()\r\n}\r\n\r\nexport async function fetchOrdersByNameGods(name:string)\r\n{\r\n  const data = encodeURIComponent(\"{\\\"name\\\":[\\\"\"+name+\"\\\"],\\\"quality\\\":[\\\"Meteorite\\\"]}\")\r\n  const res = await fetch(\"https://api.x.immutable.com/v1/orders?page_size=5&sell_token_address=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c&buy_token_address=0xccc8cb5229b0ac8069c51fd58367fd1e622afd97&direction=asc&include_fees=true&order_by=buy_quantity&status=active&sell_metadata=\"+data)\r\n  return res.json()\r\n}\r\n\r\nexport async function getLowestOrderByNameEth(name:string)\r\n{\r\n  const json = await fetchOrdersByNameEth(name)\r\n  const buy = json.result[0].buy.data\r\n  return buy\r\n}\r\n\r\nexport async function getPriceByNameGods(name:string)\r\n{\r\n  const json = await fetchOrdersByNameGods(name)\r\n  const buy = json.result[0].buy.data\r\n  return buy.quantity / Math.pow(10,buy.decimals)\r\n}\r\n\r\nexport async function getPriceByNameEth(name:string)\r\n{\r\n  const json = await fetchOrdersByNameEth(name)\r\n  const buy = json.result[0].buy.data\r\n  return buy.quantity / Math.pow(10,buy.decimals)\r\n}","import {useEffect} from 'react'\r\n\r\nexport function round(n:number, d:number)\r\n{\r\n    if(n === 0)\r\n        return 0\r\n    const x = Math.pow(10,d)\r\n    return Math.round((n + Number.EPSILON) * x) / x\r\n}\r\n\r\nexport function getCurrencyNameFromAddress(addr:string)\r\n{\r\n    return addr === \"0xccc8cb5229b0ac8069c51fd58367fd1e622afd97\" ? \"gods\" : \"eth\"\r\n}\r\n\r\nexport function useAsyncEffect<T>(fn:() => Promise<T>)\r\n{\r\n    return useEffect(() =>\r\n    {\r\n        (async () =>\r\n        {\r\n            fn()\r\n        })()\r\n    })\r\n}\r\n\r\nexport function sleep(ms:number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport TokenList from '../Components/TokenImageDisplayList'\r\nimport * as imx from '../Api/Imx'\r\nimport { useAddress } from '../Context/GlobalContextProvider'\r\nimport { TokenDisplayProps } from '../Components/TokenImageDisplayList'\r\nimport { getCurrencyNameFromAddress } from '../Utils'\r\nimport { useAsyncEffect } from '../Utils'\r\nimport { Link, ETHTokenType } from '@imtbl/imx-sdk';\r\n\r\nfunction tokenDisplay(p:TokenDisplayProps)\r\n{\r\n    const sellOrder = p.token.orders.sell_orders[0]\r\n    const amount = sellOrder.buy_quantity / Math.pow(10,sellOrder.buy_decimals)\r\n    const currency = getCurrencyNameFromAddress(sellOrder.contract_address)\r\n\r\n    return (<div>\r\n    </div>)\r\n}\r\n\r\ntype TokenListDisplayProps = {\r\n    children:JSX.Element[]\r\n}\r\nfunction TokenListDisplay(p:TokenListDisplayProps)\r\n{\r\n    return (<div className=\"token-list-container\">{p.children}</div>)\r\n}\r\n\r\ntype ImageDisplayProps = {\r\n    url:string\r\n}\r\nfunction ImageDisplay(props:ImageDisplayProps)\r\n{\r\n    return (<div className='token-list-card'>\r\n        <img className='token-list-image' src={props.url}/>\r\n    </div>)\r\n}\r\n\r\ntype OrderDisplayProps = {\r\n    token:any\r\n}\r\nfunction OrderDisplay(p:OrderDisplayProps)\r\n{\r\n    const sellOrder = p.token.orders.sell_orders[0]\r\n    const amount = sellOrder.buy_quantity / Math.pow(10,sellOrder.buy_decimals)\r\n    const currency = getCurrencyNameFromAddress(sellOrder.contract_address)\r\n    const address = useAddress()\r\n\r\n    var [price, setPrice] = useState(0)\r\n\r\n    async function relist()\r\n    {\r\n        console.log(\"relist \" + address)\r\n        console.log(p.token)\r\n        const link = new Link('https://link.x.immutable.com');\r\n        const res = await link.sell({\r\n            amount: '10',\r\n            tokenId: '123',\r\n            tokenAddress: '0x2ca7e3fa937cae708c32bc2713c20740f3c4fc3b',\r\n        });\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        (async () =>\r\n        {\r\n            const newPrice = currency == \"gods\" ? await imx.getPriceByNameGods(p.token.name) : await imx.getPriceByNameEth(p.token.name)\r\n            console.log(newPrice)\r\n            setPrice(newPrice)\r\n        })()\r\n    }, [amount])\r\n\r\n    return (<div>\r\n        <div>current: {amount} {currency}</div>\r\n        <div>lowest : {price} {currency}</div>\r\n        { price != 0 && amount != price ? <button onClick={relist}>relist at lowest</button> : null }\r\n    </div>)\r\n}\r\n\r\nexport default function OrdersPage()\r\n{\r\n    var [ orders, setOrders ] = useState<any[]>([])\r\n    var address = useAddress()\r\n\r\n    useEffect(() => {(async () =>\r\n    {\r\n        console.log(\"fetching assets from \" + address)\r\n        const responds = await imx.fetchAssets(address)\r\n        const assetsWithSellOrders = responds.result.filter((a:any) => a.orders.sell_orders?.length > 0)\r\n        console.log(assetsWithSellOrders)\r\n        setOrders(assetsWithSellOrders)\r\n    })()}, [address])\r\n\r\n    return(\r\n        <div>\r\n            <TokenListDisplay>\r\n                { orders.map((t,i) =>\r\n                    <div key={i}>\r\n                        <ImageDisplay url={t.metadata.image}/>\r\n                        <OrderDisplay token={t}/>\r\n                    </div>\r\n                )}\r\n            </TokenListDisplay>\r\n        </div>\r\n    )\r\n}","import { Link } from '@imtbl/imx-sdk';\r\n\r\nexport async function sell(token:any, price:number, currencyAddress?:string):Promise<number>\r\n{\r\n    const link = new Link('https://link.x.immutable.com');\r\n    return (await link.sell({\r\n        amount: price.toString(),\r\n        tokenId: token.token_id,\r\n        tokenAddress: token.token_address,\r\n        currencyAddress: currencyAddress\r\n    }) as unknown) as number\r\n}\r\n\r\nexport async function sellEth(token:any, price:number):Promise<number>\r\n{\r\n    return sell(token, price)\r\n}\r\n\r\nexport async function sellGods(token:any, price:number):Promise<number>\r\n{\r\n    return sell(token, price, \"0xccc8cb5229b0ac8069c51fd58367fd1e622afd97\")\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport * as imx from '../Api/Imx'\r\nimport { useTotalAssetValueAdd } from '../Context/TotalAssetValueContext'\r\nimport { useEthPrice, useGodsPrice, useAddress } from '../Context/GlobalContextProvider'\r\nimport { round, sleep } from '../Utils'\r\nimport * as link from '../Api/link'\r\n\r\ntype TokenDisplayProps =\r\n{\r\n    tokenGrp:any[]\r\n    onChange:()=>void\r\n}\r\n\r\nexport default function TokenSummaryDisplay(props:TokenDisplayProps)\r\n{\r\n    var [tokenName, tokensx] = props.tokenGrp\r\n    var [tokens, setTokens] = useState(tokensx)\r\n    var [selling, setSelling] = useState(false)\r\n    var [amountEth, setAmountEth] = useState(0)\r\n    var [amountGods, setAmountGods] = useState(0)\r\n    var addTotalAssetValue = useTotalAssetValueAdd()\r\n    var ethPrice = useEthPrice()\r\n    var godsPrice = useGodsPrice()\r\n    var address = useAddress()\r\n\r\n    async function sellEth()\r\n    {\r\n        const token = tokens.find((t:any) => t.orders.sell_orders == undefined)\r\n        console.log(\"sell eth \" + tokenName + \" \" + token.token_id)\r\n\r\n        const orders = await imx.fetchOrdersByNameEth(tokenName)\r\n        const order = orders.result[0]\r\n        console.log(order)\r\n\r\n        const currentAmountEth = order.buy.data.quantity / Math.pow(10,order.buy.data.decimals)\r\n        console.log(\"current amount: \" + currentAmountEth)\r\n\r\n        const newAmountEth = order.user == address ? currentAmountEth : round(currentAmountEth-0.0000001, 8)\r\n        console.log(\"lowest order\")\r\n        console.log(order)\r\n        console.log(order.user == address ? \"OWNER\" : \"UNDERCUT\")\r\n\r\n        var sellOrderID = 0\r\n        try\r\n        {\r\n            setSelling(true)\r\n            sellOrderID = await link.sellEth(token, newAmountEth)\r\n        }\r\n        catch(ex)\r\n        {\r\n            setSelling(false)\r\n            console.log(\"EXCEPTION\")\r\n            console.log(ex)\r\n            return;\r\n        }\r\n        \r\n        var count = 0\r\n        while(count < 20)\r\n        {\r\n            const newAssets = await imx.fetchAssetsByName(address, tokenName)\r\n            if(newAssets.result.some((no:any) => no.orders?.sell_orders?.some((so:any) => so.order_id == sellOrderID)))\r\n            {\r\n                setTokens(newAssets.result)\r\n                setAmountEth(newAmountEth)\r\n                break\r\n            }\r\n            count++\r\n            await sleep(1000)\r\n        }\r\n        setSelling(false)\r\n    }\r\n\r\n    async function sellGods()\r\n    {\r\n        const newAmountGods = round(amountGods-0.0001, 5)\r\n        const token = tokens.find((t:any) => t.orders.sell_orders == undefined)\r\n        await link.sellGods(token, newAmountGods)\r\n        props.onChange()\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        const getPrice = async () =>\r\n        {\r\n            const ethRes = await imx.fetchOrdersByNameEth(tokenName)\r\n            if(ethRes.result.length != 0)\r\n            {\r\n                const ethQuantity = ethRes.result[0].buy.data.quantity/Math.pow(10,18)\r\n                setAmountEth(ethQuantity)\r\n                const usdValue = ethQuantity*ethPrice\r\n                addTotalAssetValue(usdValue*props.tokenGrp.length)\r\n            }\r\n            const godsRes = await imx.fetchOrdersByNameGods(tokenName)\r\n            if(godsRes.result.length != 0)\r\n            {\r\n                const godsQuantity = godsRes.result[0].buy.data.quantity/Math.pow(10,18)\r\n                setAmountGods(godsQuantity)\r\n                const usdValue = godsQuantity*godsPrice\r\n            }\r\n        }\r\n        getPrice()\r\n    }, [])\r\n\r\n    return (<div className='token-list-card'>\r\n        <img className='token-list-image' src={tokens[0].metadata.image}/>\r\n        <div>{tokenName} (x{tokens.length})</div>\r\n        <div>\r\n            <a>eth: {round(amountEth*ethPrice,2)}$</a>\r\n            { tokens.some((t:any) => t.orders.sell_orders == undefined) && !selling ? <button onClick={sellEth}>sell</button> : <div></div>}\r\n        </div>\r\n        <div>\r\n            <a>gods: {round(amountGods*godsPrice,2)}$</a>\r\n            { tokens.some((t:any) => t.orders.sell_orders == undefined) && !selling ? <button onClick={sellGods}>sell</button> : <div></div>}\r\n        </div>\r\n    </div>)\r\n}","import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport TokenSummaryDisplay from './TokenSummaryDisplay';\r\n\r\ntype TokenListProps =\r\n{\r\n  tokens:any[]\r\n  children:JSX.Element\r\n  onChange:() => void\r\n}\r\n\r\nexport default function TokenSummaryList(props:TokenListProps)\r\n{\r\n  if (props.tokens.length == 0)\r\n    return <div></div>\r\n    \r\n  const grouped = props.tokens.reduce((acc, itm) => {\r\n    if(!acc[itm.metadata.name])\r\n      acc[itm.metadata.name] = []\r\n    acc[itm.metadata.name].push(itm);\r\n    return acc;\r\n  }, {});\r\n\r\n  return (<div className=\"token-list-container\">{Object.entries(grouped).map((grp,i) => (<div key={i}><TokenSummaryDisplay onChange={props.onChange} tokenGrp={grp}/></div>))}</div>)\r\n}","import { useContext, useEffect, useState } from 'react';\r\nimport * as imx from '../Api/Imx'\r\nimport TokenSummaryList from '../Components/TokenSummaryList';\r\nimport { useTotalAssetValue } from '../Context/TotalAssetValueContext'\r\nimport { useEthPrice, useGodsPrice, useAddress } from '../Context/GlobalContextProvider'\r\nimport { round } from '../Utils'\r\n\r\nexport default function TokenSummaryPage()\r\n{\r\n    var [tokens, setTokens] = useState([])\r\n    var [ethBalance, setEthBalance] = useState(0)\r\n    var [godsBalance, setGodsBalance] = useState(0)\r\n    var address = useAddress()\r\n    const ethPrice = useEthPrice()\r\n    const godsPrice = useGodsPrice()\r\n    const totalAssetValue = useTotalAssetValue()\r\n\r\n    async function onChange()\r\n    {\r\n        console.log(\"CHANGE\")\r\n        const responds = await imx.fetchAssets(address)\r\n        setTokens(responds.result)\r\n    }\r\n\r\n    useEffect(() =>{(async () => {\r\n        if(address == \"\")return\r\n        const responds = await imx.fetchAssets(address)\r\n        setTokens(responds.result)\r\n    })()}, [address])\r\n\r\n    useEffect(() =>{(async () => {\r\n        if(address == \"\")return\r\n        console.log(\"GET BALANCE\")\r\n        const balancesResponds = await imx.fetchBalances(address);\r\n        const newGods = balancesResponds.result.find((x:any) => x.symbol === \"GODS\")?.balance / Math.pow(10,18)\r\n        const newEth = balancesResponds.result.find((x:any) => x.symbol === \"ETH\")?.balance / Math.pow(10,18)\r\n        \r\n        setEthBalance(newEth || 0)\r\n        setGodsBalance(newGods || 0)\r\n    })()}, [address, tokens])\r\n\r\n    const balanceTotal = godsBalance*godsPrice + ethBalance*ethPrice\r\n    const total = totalAssetValue + balanceTotal\r\n\r\n    return (<div>\r\n        <div>coingecko eth price: {ethPrice}$</div>\r\n        <div>coingecko gods price: {godsPrice}$</div>\r\n        <div>_____</div>\r\n        <div>GODS: {round(godsBalance*godsPrice,2)}$ ({round(godsBalance,2)})</div>\r\n        <div>ETH: {round(ethBalance*ethPrice,2)}$ ({round(ethBalance,4)})</div>\r\n        <div>TOTAL: {round(balanceTotal,2)}$</div>\r\n        <div>_____</div>\r\n        <div>TOTAL: {round(total,2)}$</div>\r\n        <TokenSummaryList tokens={tokens} onChange={onChange}><></></TokenSummaryList>\r\n    </div>)\r\n}","import './App.css';\nimport { GlobalContextProvider } from './Context/GlobalContextProvider'\nimport Navbar from './Components/Navbar/Navbar';\nimport ButtonMetaMask from './Components/MetaMaskButton'\nimport { TotalAssetValueProvider } from './Context/TotalAssetValueContext'\nimport OrdersPage from './Pages/OrdersPage';\nimport TokenSummaryPage from './Pages/TokenSummaryPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalContextProvider>\n        <>\n          <ButtonMetaMask/>\n          <Navbar items=\n            {[\n              {label: \"Inventory\", page: (<TotalAssetValueProvider><TokenSummaryPage/></TotalAssetValueProvider>)},\n              {label: \"Orders\", page: (<OrdersPage></OrdersPage>)}\n            ]}/>\n        </>\n      </GlobalContextProvider>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { MetaMaskProvider } from \"metamask-react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MetaMaskProvider>\n      <App />\n    </MetaMaskProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}